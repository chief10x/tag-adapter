apply plugin: 'maven-publish'
apply plugin: 'signing'

project.afterEvaluate {
    publishing {
        publications {
            lib(MavenPublication) {
                groupId publishedGroupId
                artifactId artifact
                version libraryVersion

                if (project.hasProperty("android")) {
                    artifact bundleReleaseAar
                    artifact androidSourcesJar
                    artifact androidJavadocsJar
                } else {
                    artifact jar
                    artifact sourcesJar
                    artifact javadocJar
                }

                // Add your description here
                pom.withXml {
                    def projectTag = asNode()
                    projectTag.appendNode('name', libraryName)
                    projectTag.appendNode('description', libraryDescription)
                    projectTag.appendNode('url', siteUrl)
                    // Set your license
                    def licenseTag = projectTag.appendNode('licenses').appendNode('license')
                    licenseTag.appendNode('name', licenseName)
                    licenseTag.appendNode('url', licenseUrl)
                    def developerTag = projectTag.appendNode('developers').appendNode('developer')
                    developerTag.appendNode('id', developerId)
                    developerTag.appendNode('name', developerName)
                    developerTag.appendNode('email', developerEmail)
                    def scmTag = projectTag.appendNode('scm')
                    scmTag.appendNode('connection', gitUrl)
                    scmTag.appendNode('developerConnection', gitUrl)
                    scmTag.appendNode('url', siteUrl)
                }

                pom.withXml {
                    final dependenciesNode = asNode().appendNode('dependencies')

                    ext.addDependency = { Dependency dep, String scope ->
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                            return // ignore invalid dependencies

                        final dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', scope)

                        if (!dep.transitive) {
                            // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                            exclusionNode.appendNode('artifactId', '*')
                            exclusionNode.appendNode('groupId', '*')
                        } else if (!dep.properties.excludeRules.empty) {
                            // Otherwise add specified exclude rules
                            final exclusionsNode = dependencyNode.appendNode('exclusions')
                            dep.properties.excludeRules.each { ExcludeRule rule ->
                                def exclusion = exclusionsNode.appendNode('exclusion')
                                exclusion.appendNode('artifactId', rule.module ?: '*')
                                exclusion.appendNode('groupId', rule.group ?: '*')
                            }
                        }
                    }

                    // List all "compile" dependencies (for old Gradle)
                    def compileDependencies = configurations.compile.getAllDependencies()
                    def apiDependencies = configurations.api.getAllDependencies()
                    def implementationDependencies = configurations.implementation.getAllDependencies()

                    implementationDependencies.each { dep ->
                        if (!compileDependencies.contains(dep) && !apiDependencies.contains(dep)) {
                            addDependency(dep, "runtime")
                        }
                    }

                    compileDependencies.each { dep ->
                        addDependency(dep, "compile")
                    }

                    apiDependencies.each { dep ->
                        if (!compileDependencies.contains(dep)) {
                            addDependency(dep, "compile")
                        }
                    }

                }
            }
        }

        repositories {
            maven {
                // change URLs to point to your repos, e.g. http://my.org/repo
                url = uri(project.findProperty("nexus.url"))
                name = 'mavenNexus'
                credentials {
                    username project.findProperty("nexus.user")
                    password project.findProperty("nexus.password")
                }
            }
        }
    }
}